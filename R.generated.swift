//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `theme`.
    static let theme = Rswift.ColorResource(bundle: R.hostingBundle, name: "theme")
    
    /// `UIColor(named: "theme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func theme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.theme, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 13 images.
  struct image {
    /// Image `camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `checkbox`.
    static let checkbox = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox")
    /// Image `checked`.
    static let checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "checked")
    /// Image `cross`.
    static let cross = Rswift.ImageResource(bundle: R.hostingBundle, name: "cross")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `folder`.
    static let folder = Rswift.ImageResource(bundle: R.hostingBundle, name: "folder")
    /// Image `image`.
    static let image = Rswift.ImageResource(bundle: R.hostingBundle, name: "image")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `note`.
    static let note = Rswift.ImageResource(bundle: R.hostingBundle, name: "note")
    /// Image `screenshot`.
    static let screenshot = Rswift.ImageResource(bundle: R.hostingBundle, name: "screenshot")
    /// Image `tasks`.
    static let tasks = Rswift.ImageResource(bundle: R.hostingBundle, name: "tasks")
    /// Image `time_tracking_logo`.
    static let time_tracking_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "time_tracking_logo")
    
    /// `UIImage(named: "camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox", bundle: ..., traitCollection: ...)`
    static func checkbox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checked", bundle: ..., traitCollection: ...)`
    static func checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cross", bundle: ..., traitCollection: ...)`
    static func cross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cross, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "folder", bundle: ..., traitCollection: ...)`
    static func folder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.folder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image", bundle: ..., traitCollection: ...)`
    static func image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "note", bundle: ..., traitCollection: ...)`
    static func note(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.note, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "screenshot", bundle: ..., traitCollection: ...)`
    static func screenshot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.screenshot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tasks", bundle: ..., traitCollection: ...)`
    static func tasks(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tasks, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "time_tracking_logo", bundle: ..., traitCollection: ...)`
    static func time_tracking_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.time_tracking_logo, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `CalendarView`.
    static let calendarView = _R.nib._CalendarView()
    /// Nib `HeaderSettingViewController`.
    static let headerSettingViewController = _R.nib._HeaderSettingViewController()
    /// Nib `NoteDialogView`.
    static let noteDialogView = _R.nib._NoteDialogView()
    
    /// `UINib(name: "CalendarView", in: bundle)`
    static func calendarView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.calendarView)
    }
    
    /// `UINib(name: "HeaderSettingViewController", in: bundle)`
    static func headerSettingViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.headerSettingViewController)
    }
    
    /// `UINib(name: "NoteDialogView", in: bundle)`
    static func noteDialogView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.noteDialogView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `positionSheetCell`.
    static let positionSheetCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "positionSheetCell")
    /// Reuse identifier `subtaskSheetCell`.
    static let subtaskSheetCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "subtaskSheetCell")
    /// Reuse identifier `topSheetCell`.
    static let topSheetCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "topSheetCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 5 view controllers.
  struct segue {
    /// This struct is generated for `AddSheetViewController`, and contains static references to 3 segues.
    struct addSheetViewController {
      /// Segue identifier `toCreatePositionSheet`.
      static let toCreatePositionSheet: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddSheetViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "toCreatePositionSheet")
      /// Segue identifier `toCreateSubtaskSheet`.
      static let toCreateSubtaskSheet: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddSheetViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "toCreateSubtaskSheet")
      /// Segue identifier `toCreateTopSheet`.
      static let toCreateTopSheet: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddSheetViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "toCreateTopSheet")
      
      /// Optionally returns a typed version of segue `toCreatePositionSheet`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toCreatePositionSheet(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddSheetViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addSheetViewController.toCreatePositionSheet, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toCreateSubtaskSheet`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toCreateSubtaskSheet(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddSheetViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addSheetViewController.toCreateSubtaskSheet, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toCreateTopSheet`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toCreateTopSheet(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddSheetViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addSheetViewController.toCreateTopSheet, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `HomeViewController`, and contains static references to 4 segues.
    struct homeViewController {
      /// Segue identifier `toPositionSheetDetail`.
      static let toPositionSheetDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, PositionSheetDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toPositionSheetDetail")
      /// Segue identifier `toSetting`.
      static let toSetting: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, SheetSettingViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toSetting")
      /// Segue identifier `toSubtaskSheetDetail`.
      static let toSubtaskSheetDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, SubtaskSheetDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toSubtaskSheetDetail")
      /// Segue identifier `toTopSheetDetail`.
      static let toTopSheetDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, TopSheetDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toTopSheetDetail")
      
      /// Optionally returns a typed version of segue `toPositionSheetDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toPositionSheetDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, PositionSheetDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.toPositionSheetDetail, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toSetting`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toSetting(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, SheetSettingViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.toSetting, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toSubtaskSheetDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toSubtaskSheetDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, SubtaskSheetDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.toSubtaskSheetDetail, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toTopSheetDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toTopSheetDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, TopSheetDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.toTopSheetDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LoginViewController`, and contains static references to 1 segues.
    struct loginViewController {
      /// Segue identifier `toHome`.
      static let toHome: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "toHome")
      
      /// Optionally returns a typed version of segue `toHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.toHome, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SheetSettingViewController`, and contains static references to 3 segues.
    struct sheetSettingViewController {
      /// Segue identifier `toEditPositionSheet`.
      static let toEditPositionSheet: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SheetSettingViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "toEditPositionSheet")
      /// Segue identifier `toEditSubtaskSheet`.
      static let toEditSubtaskSheet: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SheetSettingViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "toEditSubtaskSheet")
      /// Segue identifier `toEditTopSheet`.
      static let toEditTopSheet: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SheetSettingViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "toEditTopSheet")
      
      /// Optionally returns a typed version of segue `toEditPositionSheet`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toEditPositionSheet(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SheetSettingViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.sheetSettingViewController.toEditPositionSheet, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toEditSubtaskSheet`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toEditSubtaskSheet(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SheetSettingViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.sheetSettingViewController.toEditSubtaskSheet, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toEditTopSheet`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toEditTopSheet(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SheetSettingViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.sheetSettingViewController.toEditTopSheet, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SignUpViewController`, and contains static references to 2 segues.
    struct signUpViewController {
      /// Segue identifier `toHome`.
      static let toHome: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignUpViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "toHome")
      /// Segue identifier `toLogin`.
      static let toLogin: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignUpViewController, LoginViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toLogin")
      
      /// Optionally returns a typed version of segue `toHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignUpViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signUpViewController.toHome, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toLogin`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toLogin(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignUpViewController, LoginViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signUpViewController.toLogin, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _NoteDialogView.validate()
    }
    
    struct _CalendarView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CalendarView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _HeaderSettingViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HeaderSettingViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _NoteDialogView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NoteDialogView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cross' is used in nib 'NoteDialogView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'camera' is used in nib 'NoteDialogView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "time_tracking_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'time_tracking_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "menu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "screenshot") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'screenshot' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "time_tracking_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'time_tracking_logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tasks") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tasks' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
